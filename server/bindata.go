// Code generated by go-bindata.
// sources:
// data/form.html
// DO NOT EDIT!

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFormHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x8f\xd3\x30\x10\x3d\x97\x5f\x31\x44\x7b\x00\x89\x6d\x38\x47\x6e\x38\x6c\x77\x11\x02\x69\xab\xed\x82\xc4\x09\xa5\xf1\xa4\x09\xb8\xb1\xe5\xb8\x55\xa3\x2a\xff\x9d\xf1\x47\xd2\x74\xd5\xd2\xe5\x10\xc5\xf6\xbc\x99\xf7\xe6\xc3\x66\x6f\xe7\x8f\x77\xcf\x3f\x17\xf7\x50\x9a\x8d\x48\xdf\x30\xff\x9b\xb0\x95\xe4\x2d\xfd\x27\xac\x90\x7a\x03\x59\x6e\x2a\x59\xcf\xa2\x08\x36\x68\x4a\xc9\x67\xd1\xe2\x71\xf9\x1c\x59\xc0\x84\x89\x6c\x85\x22\x5d\x62\xae\xd1\xc0\x57\x6c\x13\x7b\x3a\x61\x55\xad\xb6\x06\x4c\xab\x70\x16\x19\xdc\x9b\x08\xea\x6c\x43\xeb\xe6\x0f\xb6\x11\xec\x32\xb1\xa5\xcd\xe1\x00\x53\xef\x49\x8e\xd0\x75\x11\xc4\x3e\x68\xec\xa3\xba\x75\xa9\xa1\x31\xad\x20\x78\x2e\x30\xd3\x09\xac\xa4\x29\x07\x64\x51\xa1\xe0\x0d\x51\x07\x4c\x21\x64\x66\x12\x10\x58\x18\x2f\x90\x14\xe2\x1a\x6b\x9e\xde\xd7\xb9\xe4\x08\x8b\x4c\x93\x10\x83\xba\x21\x16\x6f\x09\x30\x47\xf9\x59\xca\xb5\x40\x98\xcb\x1c\xbe\xcc\x13\x70\xa6\xcb\xd9\x70\x99\x57\x7c\x94\x4e\x55\x73\xdc\xc3\xf4\xc1\x89\x9a\x3a\x2b\x7c\x3c\xe6\x75\x92\x18\x55\x59\xc7\x69\x5f\xbf\x12\x29\x07\x62\xbc\x42\xd8\x58\xdc\x45\x42\x67\x7d\x1d\xe1\x03\x35\x96\x0a\x15\xe8\x1a\x14\x98\x9b\xc0\x51\x38\x53\xa8\x1e\x19\xa5\xb2\xed\xef\x39\xf3\x66\x17\xa5\x77\xcb\x1f\x2c\xf6\xe7\x01\xc6\x62\x1f\xe3\x0a\xed\x42\xcb\xdf\x96\xe9\x89\x2a\xbf\x57\xd7\xb2\x25\x19\x79\xf9\x4b\x79\x9f\x8b\x59\x9f\xa0\xce\x66\x0f\xef\x64\x2d\x5a\xa0\xc4\x80\xe4\x83\x4f\xf0\xfd\x48\xdc\x58\x40\xb3\x5d\x6d\xaa\x41\x02\xba\xa9\x19\xb8\xef\xc3\xb6\x27\x28\x75\xbf\x52\x76\xc0\x74\xab\x0c\x72\xf8\xfe\xf4\x2d\x01\x96\x41\xa9\xb1\xb0\x7a\xa7\x74\xd0\x75\x9f\xec\xb8\x1f\x41\xa4\x33\x1d\x4c\xcc\x98\xf4\xa5\x99\xc5\x74\xc8\xe2\x8c\x3e\x15\xae\x45\x3f\xed\xff\x3b\xfb\x73\x7c\xcd\xec\x1f\xc9\xd5\x00\xbc\x7a\x05\xb0\x77\x1a\xf5\xe7\x98\xc6\xbf\x47\xf1\x72\xd9\x39\x9e\x94\x7d\x8e\x17\xca\x4e\x86\x33\x92\x99\xd2\x68\x6b\x3b\x58\x97\x46\x57\xf5\xda\x96\xd4\x5a\x7c\x0c\x1e\xa4\x1c\x0e\xb7\xa0\xb3\x7a\x8d\x70\x43\x6f\xd3\x07\xb8\x21\x4e\x48\x66\x70\xf4\x86\xdb\xae\x0b\x55\xe0\xae\x4d\x16\xe8\x1a\xc4\xc3\xbc\x8f\x83\x54\x36\x84\x0d\xe0\x02\x8d\x5c\xb9\x73\xdd\x79\x47\x3e\x72\xa4\x3e\x0c\xb8\x97\x7b\x82\x8a\x33\xcd\xa7\x1d\x0d\xb1\x7d\xaa\x63\xff\x56\xb3\xd8\xbf\xdd\x7f\x03\x00\x00\xff\xff\x9d\xc1\x0d\x0a\xd3\x05\x00\x00")

func dataFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataFormHtml,
		"data/form.html",
	)
}

func dataFormHtml() (*asset, error) {
	bytes, err := dataFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/form.html", size: 1491, mode: os.FileMode(420), modTime: time.Unix(1456758835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/form.html": dataFormHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"form.html": &bintree{dataFormHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

