// Code generated by go-bindata.
// sources:
// data/form.html
// DO NOT EDIT!

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFormHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xc1\x6e\xdb\x38\x10\x3d\x3b\x5f\x31\x2b\xe4\xb8\xb6\x9c\xab\x96\xd6\x1e\xe2\x64\xb1\xd8\x05\xe2\xc6\x69\x81\x9e\x0a\x5a\x1c\x59\x6c\x68\x51\xa0\x68\x27\xaa\xe1\x7f\xef\x90\x92\x25\xd9\xb5\x0b\xa7\xed\xa5\x07\x43\x12\x39\x33\xef\xcd\xbc\xe1\x98\xec\x8f\xe9\xc3\xed\xd3\xc7\xd9\x1d\x64\x76\xa5\xe2\x2b\x56\x3f\x06\x2c\x43\x2e\xe8\x39\x60\xa5\xad\x14\xba\xb7\x41\x2a\x51\x89\x12\x2d\xc4\xa0\xf8\x02\x15\x3d\xcb\x82\xe7\x51\x2a\x4d\x69\x87\x49\x26\x95\x80\xad\x33\x1c\x08\x59\x16\x8a\x57\x11\xc8\x5c\xc9\x1c\x87\x0b\xa5\x93\xe7\xbf\xfc\xd6\x8b\x14\x36\x8b\xe0\x66\x8c\x2b\xbf\xb0\x73\x18\xe1\x1e\x84\x85\x0d\x2e\x5b\x68\x51\x79\xfc\x54\x9b\x15\xf0\xc4\x4a\x9d\x4f\x82\x00\x56\x68\x33\x2d\x26\xc1\xec\x61\xfe\x14\x78\x5a\xcc\x93\x89\xe7\x98\x18\xe2\xf6\x1f\x56\x91\x07\x62\x32\x2f\xd6\x16\x6c\x55\xe0\x24\xb0\xf8\x6a\x03\xc8\xf9\x8a\xde\xcb\x67\xac\x02\xd8\x70\xb5\xa6\x8f\xed\x16\x46\xb5\x27\x39\xc2\x6e\x17\x40\x58\x07\x0d\xeb\xa8\xfe\x3d\x33\xe0\x09\x4e\x82\x44\x21\x37\x11\x2c\xb4\xcd\x5a\xcb\xb6\x2c\x8d\x4d\xaa\x34\xb7\x11\x28\x4c\x6d\x4d\x90\x18\xe2\x12\x73\x11\xdf\xe5\x89\x16\x08\x33\x6e\x88\x88\x45\x53\x12\x4a\xbd\xd3\x98\xb5\x90\xae\xee\x54\xda\xf8\x1f\xad\x97\x0a\x61\xaa\x13\xf8\x77\x1a\x51\x9d\xdc\x62\x63\x70\x2e\x3f\xa1\x13\x29\x7a\x09\xca\x5c\xe0\x2b\x8c\xee\x3d\xcd\x91\xdf\x85\x71\x97\xe9\x41\xaa\x54\x77\x13\x9e\x65\x33\xcf\x90\xd2\xfc\x86\x88\x90\x9b\x7d\xee\xa7\x85\x87\x0d\x1a\x2b\x13\xae\x86\x5c\xc9\x65\x1e\x81\xd5\x45\x53\x9a\xc1\x60\xbb\x1d\x82\xe1\xf9\x12\xe1\x9a\x84\xf9\x13\xae\x89\x38\x44\x93\x96\x70\xe9\x41\x87\xbb\x5d\xcf\x5e\xa6\xb5\x59\xb7\x7a\x5e\x6d\xe7\xde\xab\x86\xf3\xeb\x25\xdf\xcf\xb8\x8e\x4d\x72\x1c\xa1\x1d\xae\x5c\x88\xd4\x21\xb0\x90\x0a\xf4\xd6\x52\xdf\x53\xd7\x53\x17\x1d\x16\xba\x44\x85\x89\x6d\xe0\x52\x6f\xd1\x96\x91\xe9\xc2\x1d\x91\x3d\x7c\x52\x6e\x82\xf8\x76\xfe\x81\x85\xf5\x7a\xcb\xa5\x8e\xf1\x56\x3a\x33\xa3\x3f\x3b\xe8\x47\x6a\xd7\xd7\xe2\xc2\x46\x24\x7a\x49\xf6\xc9\xf2\xf2\xf9\x6c\x37\x76\x26\x17\xb5\x64\x1f\xa9\x5c\x2f\x56\xb2\xc5\x42\x7f\xb4\x5a\x9c\xbb\xe6\x73\xef\x98\xb5\x21\x0a\x77\x0a\x4d\x55\x58\x14\xf0\xfe\xf1\xff\x08\x18\x87\xcc\x60\xea\xb8\x8d\x68\x61\xb7\xfb\xbb\x9c\xb8\xa9\xd0\x99\x11\xb1\xb8\xb7\xc9\xac\x8d\x8f\x0d\x58\x48\x8b\x2c\xe4\xf4\x2b\x9a\xf9\xb1\x1f\x0b\x3f\x38\x24\x1e\xf9\x0b\xbc\x5b\xa3\xa9\xbe\x33\x23\xa6\xb8\x67\xd0\x8d\x94\xe8\xea\xb8\xab\xcf\x0f\x8a\xbd\x7b\x4f\x9e\x51\x1b\x73\x6e\x8d\xcc\x97\x4e\x94\x52\x7e\xa1\xbd\x9b\xf1\xf8\xa7\xf5\x31\xfc\xe5\x58\xa2\xdf\x50\x21\x2a\xd1\xc5\x63\xbc\xa3\x50\x74\x12\xc1\xe5\x1a\x61\x7e\x42\xa3\x36\xe8\xaf\x52\x47\xe0\xc1\xe9\x99\xe2\x99\xd3\xd3\x35\x5c\x3f\x1b\x56\x18\x8c\x4f\xb5\x0e\x95\xda\x60\x13\x43\x34\x7c\xce\x8e\xfb\x2e\x76\x3b\x6b\x99\xf0\x3a\x3a\x43\xaf\xa0\x68\xe6\x56\x3f\x88\x74\x21\x5c\x80\xc3\x3f\x04\x26\x84\x77\xdd\xd4\x8e\xa2\xe7\xd8\x1f\xe7\xc7\xdf\x64\xaa\x4e\x74\x07\x7d\xd1\xb4\xf5\xf7\x93\xfa\x5e\x42\xf7\x14\x7f\x4f\xfa\x1a\x00\x00\xff\xff\x02\xf7\xf0\x02\x3f\x09\x00\x00")

func dataFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataFormHtml,
		"data/form.html",
	)
}

func dataFormHtml() (*asset, error) {
	bytes, err := dataFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/form.html", size: 2367, mode: os.FileMode(420), modTime: time.Unix(1457608248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/form.html": dataFormHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"form.html": &bintree{dataFormHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

